---
import BaseLayout from '../layouts/BaseLayout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
---

<BaseLayout title="ESTADISTICAS Y RANKINGS - GeoAstur">
  <Header />
  
  <!-- Main Container -->
  <div class="main-container">
    <!-- Loading -->
    <div class="loading" id="loading">
      <div class="spinner"></div>
      <p>Cargando estadísticas...</p>
    </div>

    <!-- ESTADISTICAS -->
    <div class="stats-grid" id="statsGrid">
      <!-- Tarjetas de estadísticas -->
    </div>

    <!-- Charts -->
    <div class="charts-container" id="chartsContainer">
      <!-- Charts will be populated here -->
    </div>

    <!-- Rankings -->
    <div class="rankings-container" id="rankingsContainer">
      <!-- Rankings will be populated here -->
    </div>
  </div>

  <Footer />

  <style>
    /* Main Container */
    .main-container {
      max-width: 1400px;
      margin: 0 auto;
      padding: 2rem;
    }

    /* ESTADISTICAS */
    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 2rem;
      margin-bottom: 0rem;
    }

    .stat-card {
      background: var(--bg-secondary);
      border-radius: 16px;
      padding: 2rem;
      border: 1px solid var(--border-color);
      transition: all 0.3s ease;
    }

    .stat-card:hover {
      transform: translateY(-4px);
      box-shadow: var(--shadow-lg);
    }

    .stat-header {
      display: flex;
      align-items: center;
      gap: 1rem;
      margin-bottom: 1.5rem;
    }

    .stat-icon {
      width: 60px;
      height: 60px;
      border-radius: 12px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.5rem;
      color: white;
    }

    .stat-icon.primary { background: var(--accent-primary); }
    .stat-icon.success { background: var(--accent-success); }
    .stat-icon.warning { background: var(--accent-warning); }
    .stat-icon.danger { background: var(--accent-danger); }
    .stat-icon.secondary { background: var(--accent-secondary); }

    .stat-info h3 {
      font-size: 2rem;
      font-weight: 700;
      color: var(--text-primary);
      margin-bottom: 0.25rem;
    }

    .stat-info p {
      color: var(--text-secondary);
      font-size: 0.875rem;
    }

    /* Charts Container */
    .charts-container {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
      gap: 2rem;
      margin-bottom: 3rem;
    }

    .chart-card {
      background: var(--bg-secondary);
      border-radius: 16px;
      padding: 2rem;
      border: 1px solid var(--border-color);
    }

    .chart-header {
      display: flex;
      align-items: center;
      gap: 0.75rem;
      margin-bottom: 1.5rem;
    }

    .chart-header h3 {
      font-size: 1.25rem;
      font-weight: 600;
      color: var(--text-primary);
    }

    .chart-header i {
      color: var(--accent-primary);
      font-size: 1.25rem;
    }

    /* Rankings */
    .rankings-container {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
      gap: 2rem;
    }

    .ranking-card {
      background: var(--bg-secondary);
      border-radius: 16px;
      padding: 2rem;
      border: 1px solid var(--border-color);
    }

    .ranking-header {
      display: flex;
      align-items: center;
      gap: 0.75rem;
      margin-bottom: 1.5rem;
    }

    .ranking-header h3 {
      font-size: 1.25rem;
      font-weight: 600;
      color: var(--text-primary);
    }

    .ranking-header i {
      color: var(--accent-primary);
      font-size: 1.25rem;
    }

    .ranking-list {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }

    .ranking-item {
      display: flex;
      align-items: center;
      gap: 1rem;
      padding: 1rem;
      background: var(--bg-primary);
      border-radius: 8px;
      border: 1px solid var(--border-color);
      transition: all 0.3s ease;
    }

    .ranking-item:hover {
      transform: translateX(4px);
      box-shadow: var(--shadow-md);
    }

    .ranking-position {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: 700;
      color: white;
      font-size: 0.875rem;
    }

    .ranking-position.gold { background: #fbbf24; }
    .ranking-position.silver { background: #94a3b8; }
    .ranking-position.bronze { background: #d97706; }
    .ranking-position.other { background: var(--accent-primary); }

    .ranking-info {
      flex: 1;
    }

    .ranking-name {
      font-weight: 600;
      color: var(--text-primary);
      margin-bottom: 0.25rem;
    }

    .ranking-details {
      font-size: 0.875rem;
      color: var(--text-secondary);
    }

    .ranking-value {
      font-weight: 700;
      color: var(--accent-primary);
      font-size: 1.125rem;
    }

    /* Loading */
    .loading {
      display: none;
      justify-content: center;
      align-items: center;
      padding: 3rem;
      color: var(--text-muted);
    }

    .loading.show {
      display: flex;
    }

    .spinner {
      width: 40px;
      height: 40px;
      border: 4px solid var(--border-color);
      border-top: 4px solid var(--accent-primary);
      border-radius: 50%;
      animation: spin 1s linear infinite;
      margin-right: 1rem;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    /* Responsive */
    @media (max-width: 768px) {
      .main-container {
        padding: 1rem;
      }

      .stats-grid {
        grid-template-columns: 1fr;
        gap: 1rem;
      }

      .charts-container {
        grid-template-columns: 1fr;
        gap: 1rem;
      }

      .rankings-container {
        grid-template-columns: 1fr;
        gap: 1rem;
      }

      .stat-card,
      .chart-card,
      .ranking-card {
        padding: 1.5rem;
      }
    }
  </style>

  <script>
    // Configuración de la API
    const API_URL = 'http://localhost:5000/api';
    
    // Variables globales
    let placesData: any[] = [];
    let charts: any = {};

    // Load places data
    async function loadPlacesData() {
      showLoading(true);
      try {
        const DATA_FILE = '/places.json';
        const response = await fetch(DATA_FILE);
        const data = await response.json();
        placesData = data.places || [];
        renderStats();
      } catch (error) {
        console.error('Error loading places:', error);
      } finally {
        showLoading(false);
      }
    }

    // Show/hide loading
    function showLoading(show: boolean) {
      const loadingElement = document.getElementById('loading');
      if (loadingElement) {
        loadingElement.classList.toggle('show', show);
      }
    }

    // Render statistics
    function renderStats() {
      renderStatsCards();
      renderCharts();
      renderRankings();
    }

    // Render ESTADISTICAS
    function renderStatsCards() {
      const stats = calculateStats();
      const container = document.getElementById('statsGrid');
      if (!container) return;
      
      container.innerHTML = `
        <div class="stat-card">
          <div class="stat-header">
            <div class="stat-icon primary">
              <i class="fas fa-map-marker-alt"></i>
            </div>
            <div class="stat-info">
              <h3>${stats.totalPlaces}</h3>
              <p>Total de Lugares</p>
            </div>
          </div>
        </div>
        
        
        <div class="stat-card">
          <div class="stat-header">
            <div class="stat-icon primary">
              <i class="fas fa-globe"></i>
            </div>
            <div class="stat-info">
              <h3>${stats.withWebsite}</h3>
              <p>Con Website</p>
            </div>
          </div>
        </div>
        
        <div class="stat-card">
          <div class="stat-header">
            <div class="stat-icon primary">
              <i class="fas fa-phone"></i>
            </div>
            <div class="stat-info">
              <h3>${stats.withPhone}</h3>
              <p>Con Teléfono</p>
            </div>
          </div>
        </div>
      `;
    }

    // Calculate statistics
    function calculateStats() {
      const totalPlaces = placesData.length;
      const clientes = placesData.filter(p => p.estado === 'cliente').length;
      const interesados = placesData.filter(p => p.estado === 'interesado').length;
      const descartados = placesData.filter(p => p.estado === 'descartado').length;
      
      const ratings = placesData.filter(p => p.rating && p.rating > 0).map(p => p.rating);
      const avgRating = ratings.length > 0 ? (ratings.reduce((a, b) => a + b, 0) / ratings.length).toFixed(1) : '0.0';
      
      const withWebsite = placesData.filter(p => p.website).length;
      const withPhone = placesData.filter(p => p.phone).length;
      
      return {
        totalPlaces,
        clientes,
        interesados,
        descartados,
        avgRating,
        withWebsite,
        withPhone
      };
    }

    // Render charts
    function renderCharts() {
      const container = document.getElementById('chartsContainer');
      if (!container) return;
      
      container.innerHTML = `
        
      `;
      
      // No charts to create
    }





    // Render rankings
    function renderRankings() {
      const container = document.getElementById('rankingsContainer');
      if (!container) return;
      
      container.innerHTML = `
        <div class="ranking-card">
          <div class="ranking-header">
            <i class="fas fa-users"></i>
            <h3>Top 10 - Más Reseñados</h3>
          </div>
          <div class="ranking-list" id="topVisitedRanking">
            <!-- Top visited ranking -->
          </div>
        </div>
        
        <div class="ranking-card">
          <div class="ranking-header">
            <i class="fas fa-percentage"></i>
            <h3>Top 10 - Mejor Relación Rating/Reseñas</h3>
          </div>
          <div class="ranking-list" id="topRatioRanking">
            <!-- Top ratio ranking -->
          </div>
        </div>
        
        <div class="ranking-card">
          <div class="ranking-header">
            <i class="fas fa-dollar-sign"></i>
            <h3>Top 10 - Mejor Relación Precio/Estrellas</h3>
          </div>
          <div class="ranking-list" id="topPriceRatingRanking">
            <!-- Top price/rating ranking -->
          </div>
        </div>
      `;
      
      renderTopVisitedRanking();
      renderTopRatioRanking();
      renderTopPriceRatingRanking();
    }




    // Render top visited ranking
    function renderTopVisitedRanking() {
      const container = document.getElementById('topVisitedRanking');
      if (!container) return;
      const topPlaces = placesData
        .filter(p => p.user_ratings_total && p.user_ratings_total > 0)
        .sort((a, b) => b.user_ratings_total - a.user_ratings_total)
        .slice(0, 10);
      
      container.innerHTML = topPlaces.map((place, index) => {
        const visitCount = place.user_ratings_total;
        const visitText = visitCount >= 1000 ? `${(visitCount/1000).toFixed(1)}k` : visitCount;
        
        return `
        <div class="ranking-item">
          <div class="ranking-position ${index < 3 ? ['gold', 'silver', 'bronze'][index] : 'other'}">
            ${index + 1}
          </div>
          <div class="ranking-info">
            <div class="ranking-name">${place.name}</div>
            <div class="ranking-details">${place.address || 'Sin dirección'}</div>
          </div>
          <div class="ranking-value">
            <div style="font-size: 1.125rem; color: var(--accent-primary);">${visitText}</div>
            <div style="font-size: 0.75rem; color: var(--text-secondary);">${place.rating}★</div>
          </div>
        </div>
      `;
      }).join('');
    }

    // Render top ratio ranking
    function renderTopRatioRanking() {
      const container = document.getElementById('topRatioRanking');
      if (!container) return;
      const topPlaces = placesData
        .filter(p => p.user_ratings_total && p.rating && p.user_ratings_total >= 10) // Mínimo 10 reseñas para ser significativo
        .map(place => ({
          ...place,
          ratio: place.rating / place.user_ratings_total,
          efficiency: (place.rating * place.user_ratings_total) / 100 // Eficiencia ponderada
        }))
        .sort((a, b) => b.efficiency - a.efficiency)
        .slice(0, 10);
      
      container.innerHTML = topPlaces.map((place, index) => {
        const efficiency = place.efficiency.toFixed(1);
        const ratio = place.ratio.toFixed(4);
        
        return `
        <div class="ranking-item">
          <div class="ranking-position ${index < 3 ? ['gold', 'silver', 'bronze'][index] : 'other'}">
            ${index + 1}
          </div>
          <div class="ranking-info">
            <div class="ranking-name">${place.name}</div>
            <div class="ranking-details">${place.address || 'Sin dirección'} • ${place.user_ratings_total} reseñas</div>
          </div>
          <div class="ranking-value">
            <div style="font-size: 1.125rem; color: var(--accent-success);">${efficiency}</div>
            <div style="font-size: 0.75rem; color: var(--text-secondary);">${place.rating}★ / ${place.user_ratings_total}</div>
          </div>
        </div>
      `;
      }).join('');
    }

    // Render top price/rating ranking
    function renderTopPriceRatingRanking() {
      const container = document.getElementById('topPriceRatingRanking');
      if (!container) return;
      const topPlaces = placesData
        .filter(p => p.rating && p.price_level && p.rating > 0 && p.price_level > 0) // Solo lugares con rating y precio
        .map(place => ({
          ...place,
          priceRatingRatio: place.rating / place.price_level // Mayor ratio = mejor relación precio/calidad
        }))
        .sort((a, b) => b.priceRatingRatio - a.priceRatingRatio)
        .slice(0, 10);
      
      container.innerHTML = topPlaces.map((place, index) => {
        const ratio = place.priceRatingRatio.toFixed(2);
        const priceText = getPriceText(place.price_level);
        const priceSymbols = '$'.repeat(place.price_level);
        
        return `
        <div class="ranking-item">
          <div class="ranking-position ${index < 3 ? ['gold', 'silver', 'bronze'][index] : 'other'}">
            ${index + 1}
          </div>
          <div class="ranking-info">
            <div class="ranking-name">${place.name}</div>
            <div class="ranking-details">${place.address || 'Sin dirección'}</div>
          </div>
          <div class="ranking-value">
            <div style="font-size: 1.125rem; color: var(--accent-warning);">${ratio}</div>
            <div style="font-size: 0.75rem; color: var(--text-secondary);">${place.rating}★ / ${priceSymbols}</div>
            <div style="font-size: 0.625rem; color: var(--text-muted);">${priceText}</div>
          </div>
        </div>
      `;
      }).join('');
    }

    // Helper function to get price text
    function getPriceText(priceLevel: number): string {
      const priceTexts: { [key: number]: string } = {
        1: 'Muy económico',
        2: 'Económico', 
        3: 'Moderado',
        4: 'Caro',
        5: 'Muy caro'
      };
      return priceTexts[priceLevel] || 'Precio no especificado';
    }

    // Inject dynamic styles for rankings
    function injectRankingStyles() {
      const existingStyles = document.getElementById('ranking-styles');
      if (existingStyles) return;
      
      const style = document.createElement('style');
      style.id = 'ranking-styles';
      style.textContent = `
        .ranking-card {
          background: var(--bg-primary);
          border-radius: 12px;
          padding: 1.5rem;
          border: 1px solid var(--border-color);
          box-shadow: var(--shadow-sm);
          transition: all 0.3s ease;
        }

        .ranking-card:hover {
          transform: translateY(-2px);
          box-shadow: var(--shadow-md);
        }

        .ranking-header {
          display: flex;
          align-items: center;
          gap: 0.75rem;
          margin-bottom: 1.5rem;
          padding-bottom: 1rem;
          border-bottom: 2px solid var(--border-color);
        }

        .ranking-header i {
          font-size: 1.5rem;
          color: var(--accent-primary);
        }

        .ranking-header h3 {
          font-size: 1.25rem;
          font-weight: 600;
          color: var(--text-primary);
          margin: 0;
        }

        .ranking-list {
          display: flex;
          flex-direction: column;
          gap: 1rem;
        }

        .ranking-item {
          display: flex;
          align-items: center;
          gap: 1rem;
          padding: 1rem;
          background: var(--bg-primary);
          border-radius: 8px;
          border: 1px solid var(--border-color);
          transition: all 0.3s ease;
        }

        .ranking-item:hover {
          transform: translateX(4px);
          box-shadow: var(--shadow-md);
        }

        .ranking-position {
          width: 40px;
          height: 40px;
          border-radius: 50%;
          display: flex;
          align-items: center;
          justify-content: center;
          font-weight: 700;
          font-size: 0.875rem;
          flex-shrink: 0;
        }

        .ranking-position.gold {
          background: linear-gradient(135deg, #ffd700, #ffed4e);
          color: #b45309;
        }

        .ranking-position.silver {
          background: linear-gradient(135deg, #c0c0c0, #e5e7eb);
          color: #374151;
        }

        .ranking-position.bronze {
          background: linear-gradient(135deg, #cd7f32, #f59e0b);
          color: white;
        }

        .ranking-position.other {
          background: var(--bg-tertiary);
          color: var(--text-secondary);
        }

        .ranking-info {
          flex: 1;
          display: flex;
          flex-direction: column;
          gap: 0.25rem;
        }

        .ranking-name {
          font-weight: 600;
          color: var(--text-primary);
          margin-bottom: 0.25rem;
        }

        .ranking-details {
          font-size: 0.875rem;
          color: var(--text-secondary);
        }

        .ranking-value {
          font-weight: 700;
          color: var(--accent-primary);
          font-size: 1.125rem;
        }

        .stats-grid {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
          gap: 2rem;
          margin-bottom: 3rem;
        }

        .stat-card {
          background: var(--bg-primary);
          border-radius: 12px;
          padding: 2rem;
          border: 1px solid var(--border-color);
          box-shadow: var(--shadow-sm);
          transition: all 0.3s ease;
        }

        .stat-card:hover {
          transform: translateY(-2px);
          box-shadow: var(--shadow-md);
        }

        .stat-header {
          display: flex;
          align-items: center;
          gap: 1rem;
        }

        .stat-icon {
          width: 60px;
          height: 60px;
          border-radius: 12px;
          display: flex;
          align-items: center;
          justify-content: center;
          font-size: 1.5rem;
        }

        .stat-icon.primary {
          background: linear-gradient(135deg, var(--accent-primary), #1d4ed8);
          color: white;
        }

        .stat-icon.secondary {
          background: linear-gradient(135deg, var(--accent-secondary), #4b5563);
          color: white;
        }

        .stat-info h3 {
          font-size: 2rem;
          font-weight: 700;
          color: var(--text-primary);
          margin-bottom: 0.25rem;
        }

        .stat-info p {
          color: var(--text-secondary);
          font-size: 0.875rem;
        }

        .rankings-container {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
          gap: 2rem;
        }
      `;
      document.head.appendChild(style);
    }

    // Initialize
    document.addEventListener('DOMContentLoaded', () => {
      injectRankingStyles();
      loadPlacesData();
    });
  </script>
</BaseLayout>
